.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gtk2::Ex::TreeMap 3"
.TH Gtk2::Ex::TreeMap 3 "2005-06-08" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gtk2::Ex::TreeMap \- Implementation of TreeMap.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&        use Gtk2::Ex::TreeMap;
\&        my $values = [6,6,4,3,2,2,1];
\&        my $treemap = Gtk2::Ex::TreeMap\->new([600,400]);
\&        $treemap\->draw_map_simple($values);
\&        my $window = Gtk2::Window\->new;
\&        $window\->signal_connect(destroy => sub { Gtk2\->main_quit; });
\&        $window\->add($treemap\->get_image);
\&        $window\->show_all;
\&        Gtk2\->main;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Treemap is a space-constrained visualization of hierarchical structures. 
It is very effective in showing attributes of leaf nodes using size and 
color coding. http://www.cs.umd.edu/hcil/treemap/
.PP
The popular treemaps are;
.PP
.Vb 3
\&        http://www.marumushi.com/apps/newsmap/newsmap.cfm
\&        http://codecubed.com/map.html the del.icio.us most popular treemap
\&        http://www.smartmoney.com/marketmap/
.Ve
.PP
This module implements the TreeMap functionality in pure perl. Currently I have
implemented only the \fBSquarified TreeMap\fR algorithm. Details of this algorithm can 
be found at http://www.win.tue.nl/~vanwijk/stm.pdf
This algorithm was chosen because it produces aesthetically pleasing rectangles.
.PP
All the drawing is done using \f(CW\*(C`GD\*(C'\fR. But \f(CW\*(C`Gtk2\*(C'\fR adds plenty of life, bells and whistles
to the otherwise passive TreeMap png image.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Gtk2::Ex::TreeMap\->new([$width, $height]);"
.el .SS "Gtk2::Ex::TreeMap\->new([$width, \f(CW$height\fP]);"
.IX Subsection "Gtk2::Ex::TreeMap->new([$width, $height]);"
Just a plain old constructor. Accepts two arguments, \f(CW$width\fR and \f(CW$height\fR of the TreeMap.
.PP
.Vb 1
\&        my $treemap = Gtk2::Ex::TreeMap\->new([600,400]);
.Ve
.SS "Gtk2::Ex::TreeMap\->draw_map_simple($values);"
.IX Subsection "Gtk2::Ex::TreeMap->draw_map_simple($values);"
Use this \s-1API\s0 to quickly build a treemap from a flat list of values. The colors of the 
rectangles are chosen internally. If you want to do anything serious, like specify colors, 
description etc, then use the \f(CW\*(C`draw_map($tree)\*(C'\fR api.
.PP
.Vb 2
\&        my $values = [6,6,4,3,2,2,1];
\&        $treemap\->draw_map_simple($values);
.Ve
.SS "Gtk2::Ex::TreeMap\->draw_map($tree);"
.IX Subsection "Gtk2::Ex::TreeMap->draw_map($tree);"
This is the api that you will use most of the time. This one accepts a hierarchical tree 
structure as its input. I have chosen the tree format that is used by the XML::Simple module.
This approach so that the tree can be easily constructed from an xml document.
.PP
Here is an example definition of the \s-1XML\s0
.PP
.Vb 10
\&        <Node>
\&                <Node>
\&                        <Node size="9" color="0,0,80" description="0 0"/>
\&                        <Node size="7" color="0,120,80" description="0 1"/>
\&                        <Node>
\&                                <Node size="9" color="0,0,100" description="0 2 0"/>
\&                                <Node size="9" color="0,0,110" description="0 2 1"/>
\&                                <Node>
\&                                        <Node size="8" color="0,0,100" description="0 2 2 0"/>
\&                                        <Node size="2" color="0,0,110" description="0 2 2 1"/>
\&                                </Node>
\&                        </Node>
\&                </Node>
\&                <Node>
\&                        <Node size="7" color="0,170,200" description="1 0"/>
\&                        <Node size="5" color="0,170,210" description="1 1"/>
\&                        <Node size="9" color="0,170,220" description="1 2"/>
\&                </Node>
\&        </Node>
.Ve
.PP
Now read this string using XML::Simple to derive the tree.
.PP
.Vb 2
\&        my $tree = XMLin($xmlstr, ForceArray => 1);
\&        $treemap\->draw_map($tree);
.Ve
.PP
\&\fBNote: It is very important to use the \f(CB\*(C`ForceArray\*(C'\fB option. Else you will end up with
a variety of errors.\fR
.SS "Gtk2::Ex::TreeMap\->get_image"
.IX Subsection "Gtk2::Ex::TreeMap->get_image"
Returns the TreeMap image as a \f(CW\*(C`Gtk2::Image\*(C'\fR wrapped in a \f(CW\*(C`Gtk2::EventBox\*(C'\fR. You can add this
to your own Gtk2 container
.PP
.Vb 4
\&        my $window = Gtk2::Window\->new;
\&        $window\->add($treemap\->get_image);
\&        $window\->show_all;
\&        Gtk2\->main;
.Ve
.SH "TODO"
.IX Header "TODO"
.Vb 9
\&  * Implement callback for mouse\-over and clicked events
\&  * Implement popup box as a default option
\&  * Implement text in the rectangles
\&  * The boxes should probably be drawn with a black border
\&  * Build a new example using WWW::Google::News perhaps !
\&  * Once the module is done, may be I\*(Aqll split it into a two; a pure GD module which 
\&    will be "used" by a Gtk2 module. That way, non\-Gtk2 folks can use it, of course 
\&    without the popups and callbacks and all those bells and whistles.
\&  * More tests, more documentation.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ofey Aikon, \f(CW\*(C`<ofey_aikon at gmail dot com>\*(C'\fR
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
To the wonderful gtk-perl list.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Ofey Aikon, All Rights Reserved.
.PP
This library is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Library General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.
.PP
This library is distributed in the hope that it will be useful, but \s-1WITHOUT\s0 \s-1ANY\s0
\&\s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A
\&\s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 Library General Public License for more
details.
.PP
You should have received a copy of the \s-1GNU\s0 Library General Public License along
with this library; if not, write to the Free Software Foundation, Inc., 59
Temple Place \- Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0.
